package com.vincestyling.apkinfoextractor.core;

import com.vincestyling.apkinfoextractor.entity.ApkInfo;
import com.vincestyling.apkinfoextractor.launch.LaunchController;
import com.vincestyling.apkinfoextractor.utils.Constancts;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextArea;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class ExportToExcel extends ExportToXml {

	public ExportToExcel(
			LaunchController launchController, ExportProcessCallback callback,
			TextArea txaPattern, ProgressBar prgBar, Button btnExport) {
		super(launchController, callback, txaPattern, prgBar, btnExport);
	}

	@Override
	public void export() throws Exception {
		Workbook wb = new HSSFWorkbook();

		Map<String, CellStyle> styles = createStyles(wb);

		Sheet sheet = wb.createSheet(Constancts.APP_NAME);
		sheet.setHorizontallyCenter(true);
		sheet.setFitToPage(true);

		Row titleRow = sheet.createRow(0);
		titleRow.setHeightInPoints(45);
		Cell titleCell = titleRow.createCell(0);
		titleCell.setCellValue("  File generated by ApkInfoExtractor (https://github.com/vince-styling), Copyright (C) 2014 Vince Styling");
		titleCell.setCellStyle(styles.get("title"));

		Row headerRow = sheet.createRow(1);
		headerRow.setHeightInPoints(40);

		String[] fields = launchController.getSolution().getExtractFields().split(",");
		for (int i = 0; i < fields.length; i++) {
			Cell headerCell = headerRow.createCell(i);
			headerCell.setCellValue(fields[i]);
			headerCell.setCellStyle(styles.get("header"));
			sheet.setColumnWidth(i, getFieldCharacterCount(fields[i]) * 256);
		}

		int rowNum = 2;
		for (int i = 0; i < launchController.getApkInfoList().size(); i++) {
			ApkResultDataProvider provider = launchController.getApkInfoList().get(i);
			postProgress(i + 1);

			Row row = sheet.createRow(rowNum++);
			for (int j = 0; j < fields.length; j++) {
				Cell cell = row.createCell(j);
				cell.setCellStyle(styles.get("cell"));
				String value = getFieldValue(provider.getApkInfo(), fields[j]);
				cell.setCellValue(value);
			}
			row.setHeight((short) (5 * 256));
		}

		File outputFile =
				new File(launchController.getSolution().getWorkdingFolder(),
				launchController.getSolution().generateOutputFileName() + ".xls");
		FileOutputStream out = new FileOutputStream(outputFile);
		wb.write(out);
		out.close();

		callback.onProcessSuccess(outputFile);
	}

	private String getAvaliableTitleFont() {
		// Get local's fonts was too slow, it spend 3s at least.
		//String[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();

		String[] preferedFonts;
		String osName = System.getProperty("os.name").toLowerCase();
		if (osName.contains("mac")) {
			preferedFonts = new String[]{
					"Tahoma",
					"SimSun",
					"ST Song",
					"Courier New",
			};
		} else if (osName.contains("ubuntu")) {
			preferedFonts = new String[]{
					"Symbol",
					"Liberation Mono",
					"Ubuntu Mono",
					"WenQuanYi Micro Hei",
			};
		} else if (osName.contains("windows")) {
			preferedFonts = new String[]{
					"Microsoft YaHei",
					"SimSun",
					"Courier New",
					"Microsoft Sans Serif",
			};
		} else {
			preferedFonts = new String[]{
					"Symbol",
					"Arial",
					"Tahoma",
					"Courier New",
			};
		}

		shuffleArray(preferedFonts);
		return preferedFonts[0];
	}

	private Map<String, CellStyle> createStyles(Workbook wb) {
		Map<String, CellStyle> styles = new HashMap<String, CellStyle>();
		String fontName = getAvaliableTitleFont();
		CellStyle style;

		Font font = wb.createFont();
		font.setFontName(fontName);
		font.setFontHeightInPoints((short) 14);
		font.setColor(IndexedColors.BROWN.getIndex());

		style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_LEFT);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setFont(font);
		styles.put("title", style);


		font = wb.createFont();
		font.setFontName(fontName);
		font.setFontHeightInPoints((short) 14);
		font.setBoldweight(Font.BOLDWEIGHT_BOLD);
		font.setColor(IndexedColors.WHITE.getIndex());

		style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_CENTER);
		style.setFillPattern(CellStyle.SOLID_FOREGROUND);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
		style.setFont(font);
		style.setWrapText(true);
		setBorder(style);
		styles.put("header", style);


		font = wb.createFont();
		font.setFontName(fontName);
		font.setFontHeightInPoints((short) 12);
		font.setColor(IndexedColors.BLACK.getIndex());

		style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_CENTER);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setWrapText(true);
		style.setFont(font);
		setBorder(style);
		styles.put("cell", style);

		return styles;
	}

	private void setBorder(CellStyle style) {
		style.setBorderRight(CellStyle.BORDER_THIN);
		style.setRightBorderColor(IndexedColors.BLACK.getIndex());
		style.setBorderLeft(CellStyle.BORDER_THIN);
		style.setLeftBorderColor(IndexedColors.BLACK.getIndex());
		style.setBorderTop(CellStyle.BORDER_THIN);
		style.setTopBorderColor(IndexedColors.BLACK.getIndex());
		style.setBorderBottom(CellStyle.BORDER_THIN);
		style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
	}

	private int getFieldCharacterCount(String fieldName) throws Exception {
		for (Method method : ApkInfo.class.getMethods()) {
			if (method.getName().equalsIgnoreCase("get" + fieldName + "CharacterCount")) {
				return Integer.parseInt(method.invoke(ApkInfo.class).toString());
			}
		}
		return 5;
	}

	private void shuffleArray(String[] array) {
		int index;
		String temp;
		Random random = new Random(System.currentTimeMillis());
		for (int i = array.length - 1; i > 0; i--) {
			index = random.nextInt(i + 1);
			temp = array[index];
			array[index] = array[i];
			array[i] = temp;
		}
	}

}
