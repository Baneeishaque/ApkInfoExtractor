package com.vincestyling.apkinfoextractor.utils;

import com.vincestyling.apkinfoextractor.core.ApkResultDataProvider;
import com.vincestyling.apkinfoextractor.entity.ApkInfo;
import com.vincestyling.apkinfoextractor.launch.LaunchController;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.Font;

import java.awt.*;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Method;
import java.util.*;

public class ExportToExcel {

	public static void exportToExcel(LaunchController controller) throws Exception {
		Workbook wb = new HSSFWorkbook();

		Map<String, CellStyle> styles = createStyles(wb);

		Sheet sheet = wb.createSheet(Constancts.APP_NAME);
		sheet.setHorizontallyCenter(true);
		sheet.setFitToPage(true);

		Row titleRow = sheet.createRow(0);
		titleRow.setHeightInPoints(45);
		Cell titleCell = titleRow.createCell(0);
		titleCell.setCellValue("  File generated by ApkInfoExtractor (https://github.com/vince-styling), Copyright (C) 2014 Vince Styling");
		titleCell.setCellStyle(styles.get("title"));

		Row headerRow = sheet.createRow(1);
		headerRow.setHeightInPoints(40);

		String[] fields = controller.getSolution().getExtractFields().split(",");
		for (int i = 0; i < fields.length; i++) {
			Cell headerCell = headerRow.createCell(i);
			headerCell.setCellValue(fields[i]);
			headerCell.setCellStyle(styles.get("header"));
			sheet.setColumnWidth(i, getFieldCharacterCount(fields[i]) * 256);
		}

		int rowNum = 2;
		for (ApkResultDataProvider provider : controller.getApkInfoList()) {
			Row row = sheet.createRow(rowNum++);
			for (int i = 0; i < fields.length; i++) {
				Cell cell = row.createCell(i);
				cell.setCellStyle(styles.get("cell"));
				String value = getFieldValue(provider.getApkInfo(), fields[i]);
				cell.setCellValue(value);
			}
			row.setHeight((short) (5 * 256));
		}

		FileOutputStream out = new FileOutputStream(
				new File(controller.getSolution().getWorkdingFolder(),
						controller.getSolution().generateOutputFileName() + ".xls"));
		wb.write(out);
		out.close();
	}

	private static final String[] PREFERED_FONTS = {
			"Source Code Pro",
			"Microsoft YaHei",
			"Bitstream Vera Sans Mono",
			"Tahoma",
	};

	private static String getAvaliableTitleFont() {
		String[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
		shuffleArray(PREFERED_FONTS);
		if (fonts == null || fonts.length == 0) return PREFERED_FONTS[0];

		for (String preferedFont : PREFERED_FONTS) {
			for (String font : fonts) {
				if (font.equalsIgnoreCase(preferedFont)) return font;
			}
		}

		if (fonts.length > 1) shuffleArray(fonts);
		return fonts[0];
	}

	private static Map<String, CellStyle> createStyles(Workbook wb) {
		Map<String, CellStyle> styles = new HashMap<String, CellStyle>();
		String fontName = getAvaliableTitleFont();
		CellStyle style;

		Font font = wb.createFont();
		font.setFontName(fontName);
		font.setFontHeightInPoints((short) 14);
		font.setColor(IndexedColors.BROWN.getIndex());

		style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_LEFT);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setFont(font);
		styles.put("title", style);


		font = wb.createFont();
		font.setFontName(fontName);
		font.setFontHeightInPoints((short) 14);
		font.setBoldweight(Font.BOLDWEIGHT_BOLD);
		font.setColor(IndexedColors.WHITE.getIndex());

		style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_CENTER);
		style.setFillPattern(CellStyle.SOLID_FOREGROUND);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
		style.setFont(font);
		style.setWrapText(true);
		setBorder(style);
		styles.put("header", style);


		font = wb.createFont();
		font.setFontName(fontName);
		font.setFontHeightInPoints((short) 10);
		font.setColor(IndexedColors.BLACK.getIndex());

		style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_CENTER);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setWrapText(true);
		style.setFont(font);
		setBorder(style);
		styles.put("cell", style);

		return styles;
	}

	private static void setBorder(CellStyle style) {
		style.setBorderRight(CellStyle.BORDER_THIN);
		style.setRightBorderColor(IndexedColors.BLACK.getIndex());
		style.setBorderLeft(CellStyle.BORDER_THIN);
		style.setLeftBorderColor(IndexedColors.BLACK.getIndex());
		style.setBorderTop(CellStyle.BORDER_THIN);
		style.setTopBorderColor(IndexedColors.BLACK.getIndex());
		style.setBorderBottom(CellStyle.BORDER_THIN);
		style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
	}

	private static int getFieldCharacterCount(String fieldName) throws Exception {
		for (Method method : ApkInfo.class.getMethods()) {
			if (method.getName().equalsIgnoreCase("get" + fieldName + "CharacterCount")) {
				return Integer.parseInt(method.invoke(ApkInfo.class).toString());
			}
		}
		return 5;
	}

	public static String getFieldValue(ApkInfo apkInfo, String fieldName) throws Exception {
		for (Method method : apkInfo.getClass().getMethods()) {
			if (method.getName().equalsIgnoreCase("get" + fieldName)) {
				return method.invoke(apkInfo).toString();
			}
		}
		return "";
	}

	private static void shuffleArray(String[] array) {
		int index;
		String temp;
		Random random = new Random(System.currentTimeMillis());
		for (int i = array.length - 1; i > 0; i--) {
			index = random.nextInt(i + 1);
			temp = array[index];
			array[index] = array[i];
			array[i] = temp;
		}
	}

}
